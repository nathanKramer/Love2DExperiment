{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"package",
				"package.cpath	package.cpath"
			],
			[
				"getB",
				"love.graphics.getBlendMode"
			],
			[
				"con",
				"controlGroups"
			],
			[
				"cont",
				"controlGroupViewY"
			],
			[
				"update",
				"updateControlGroupView"
			],
			[
				"cgCont",
				"cgContainerHeight"
			],
			[
				"cg",
				"cgContainerHeight"
			],
			[
				"cgC",
				"cgContainerWidth"
			],
			[
				"ne",
				"newCameraPosY"
			],
			[
				"el",
				"elseif	elseif cond then"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.lua",
			"settings":
			{
				"buffer_size": 1294,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/hud.lua",
			"settings":
			{
				"buffer_size": 3752,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Gameobjects.lua",
			"settings":
			{
				"buffer_size": 599,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/levels/test.json",
			"settings":
			{
				"buffer_size": 514,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/units/Wall.lua",
			"settings":
			{
				"buffer_size": 734,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/utils/shader.lua",
			"settings":
			{
				"buffer_size": 3819,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/libs/JSON.lua",
			"settings":
			{
				"buffer_size": 34842,
				"line_ending": "Windows",
				"name": "-- -*- coding: utf-8 -*-"
			}
		},
		{
			"file": "src/Entities.lua",
			"settings":
			{
				"buffer_size": 4346,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/units/MoveableEntity.lua",
			"settings":
			{
				"buffer_size": 2902,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/units/Light.lua",
			"settings":
			{
				"buffer_size": 920,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/units/Player.lua",
			"settings":
			{
				"buffer_size": 1158,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/input.lua",
			"settings":
			{
				"buffer_size": 1725,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Game.lua",
			"settings":
			{
				"buffer_size": 4154,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/world.lua",
			"settings":
			{
				"buffer_size": 1969,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 85 files for \"box\"\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\Game.lua:\n  106  \n  107  --\n  108: -- Checks if there are objects to select within the selection box.\n  109  -- If there are, adds all of them to the set of selected objects\n  110  --\n  111: function Game:checkForSelectInBox()\n  112  \n  113: 	local selectionBox = Hud.selectionBox.rectangle\n  114  	local initialDeselect = true\n  115  	for id, gameObj in pairs(Entities.GameObjects) do\n  116  \n  117  		if gameObj.tryToDragSelect ~= nil then\n  118: 			if gameObj:tryToDragSelect(selectionBox) then\n  119  				if not love.keyboard.isDown( \"lshift\" ) and initialDeselect then\n  120  					Game:deselectObjects()\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\hud.lua:\n    1  local class = require 'src.libs.middleclass'\n    2  require 'src.units.square'\n    3: require 'src.utils.BoundingBox'\n    4  \n    5  Hud = {}\n    6  Hud.size = 0\n    7: Hud.selectionBox = {}\n    8: Hud.selectionBox.drawingSelectionBox = false\n    9: Hud.selectionBox.lastClicked = {}\n   10: Hud.selectionBox.rectangle = nil\n   11  \n   12  local gWidth, gHeight\n   ..\n   30  end\n   31  \n   32: function Hud:startSelectionBox(x, y) \n   33: 	self.selectionBox.lastClicked = { x = x, y = y }\n   34: 	self.drawingSelectionBox = true\n   35  end\n   36  \n   37: function Hud:endSelectionBox()\n   38: 	self.drawingSelectionBox = false\n   39  end\n   40  \n   41  function Hud:update(dt)\n   42  \n   43: 	-- Update selectionbox\n   44: 	if self.drawingSelectionBox then\n   45: 		local x = Hud.selectionBox.lastClicked.x\n   46: 		local y = Hud.selectionBox.lastClicked.y\n   47  \n   48  		local otherX, otherY = camera:mousePosition()\n   ..\n   56  		local selectionColour = { r = 128, g = 255, b = 128 }\n   57  		local innerColour = { r = 128, g = 255, b = 128, a = 64 }\n   58: 		Hud.selectionBox.square = BoundingBox:new(rectX, rectY, rectX + rectWidth, rectY + rectHeight)\n   59: 		Hud.selectionBox.rectangle = BoundingBox:new(rectX, rectY, rectX + rectWidth, rectY + rectHeight)\n   60  	end\n   61  end\n   62  \n   63: function Hud:drawSelectionBox()\n   64  	love.graphics.setLineWidth(1)\n   65: 	if self.drawingSelectionBox then\n   66  		local x, y, width, height = \n   67: 			Hud.selectionBox.square.x1, \n   68: 			Hud.selectionBox.square.y1, \n   69: 			Hud.selectionBox.square.width, \n   70: 			Hud.selectionBox.square.height\n   71  		love.graphics.setColor(128, 255, 128)\n   72  		love.graphics.rectangle('line', x, y, width, height )\n   ..\n   76  end\n   77  \n   78: -- draws a box for each control group at the bottom of the screen\n   79  function Hud:drawControlGroupView()\n   80  	local startX, startY = camera:scalePoint(controlGroupViewX, controlGroupViewY)\n   ..\n  113  function Hud:draw()\n  114  	love.graphics.setBlendMode('alpha')\n  115: 	Hud:drawSelectionBox()\n  116  	Hud:drawControlGroupView()\n  117  	Hud:drawHudBorder()\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\input.lua:\n   51  -------------- Functions to do stuff. These are called from controller and passed stuff\n   52  function Input:mouse1Pressed(x, y)\n   53: 	Hud:startSelectionBox(x, y)\n   54  	Game:checkForSelect(x, y)\n   55  \n   ..\n   58  \n   59  function Input:mouse1Released(x, y)\n   60: 	Hud:endSelectionBox(x, y)\n   61: 	Game:checkForSelectInBox()\n   62  \n   63  	Input.__mouse1Released = false\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\Entity.lua:\n    3  Entity = class('Entity')\n    4  \n    5: function Entity:initialize(x, y, box)\n    6  	self.origin = vector(x, y) -- origin stored as vector\n    7: 	self.boundingBox = box\n    8  end\n    9  \n   ..\n   16  end\n   17  \n   18: function Entity:refreshBoundingBox(dt)\n   19  	local x = self:getX()\n   20  	local y = self:getY()\n   21: 	self.boundingBox = BoundingBox:new(\n   22: 		x - (self.boundingBox.width / 2), \n   23: 		y - (self.boundingBox.height / 2),\n   24: 		x + (self.boundingBox.width / 2),\n   25: 		y + (self.boundingBox.height / 2)\n   26  	)\n   27  end\n   28  \n   29  function Entity:getPoints()\n   30: 	return self.boundingBox:vertices()\n   31  end\n   32  \n   33  function Entity:update(dt)\n   34: 	self:refreshBoundingBox(dt)\n   35  end\n   36  \n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\Player.lua:\n    3  local class = require 'src.libs.middleclass'\n    4  require 'src.utils.geometry'\n    5: require 'src.utils.BoundingBox'\n    6  require 'src.units.BaseUnit'\n    7  require 'src.units.Light'\n    .\n   13  		x, \n   14  		y, \n   15: 		BoundingBox:new(\n   16  			x - (width / 2), \n   17  			y - (height / 2),\n   ..\n   41  	if not self.colorTable.a then self.colorTable.a = 255 end\n   42  	love.graphics.setColor(self.colorTable.r, self.colorTable.g, self.colorTable.b, self.colorTable.a)\n   43: 	love.graphics.rectangle(self.mode, self.boundingBox.x1, self.boundingBox.y1, self.boundingBox.width, self.boundingBox.height)\n   44  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\Wall.lua:\n    3  local class = require 'src.libs.middleclass'\n    4  require 'src.utils.geometry'\n    5: require 'src.utils.BoundingBox'\n    6  require 'src.units.BaseUnit'\n    7  require 'src.units.Light'\n    .\n   13  		x, \n   14  		y, \n   15: 		BoundingBox:new(\n   16  			x - (width / 2), \n   17  			y - (height / 2),\n   ..\n   29  	BaseUnit.draw(self)\n   30  	love.graphics.setColor(255, 255, 255)\n   31: 	love.graphics.rectangle('fill', self.boundingBox.x1, self.boundingBox.y1, self.boundingBox.width, self.boundingBox.height)\n   32  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\init.lua:\n  133  		elseif hoverobject.type == \"frame\" then\n  134  			if not hoverobject.dragging and hoverobject.canresize then\n  135: 				if loveframes.util.BoundingBox(hoverobject.x, mx, hoverobject.y, my, 5, 1, 5, 1) then\n  136  					local sizenwse = love.mouse.getSystemCursor(\"sizenwse\")\n  137  					if curcursor ~= sizenwse then\n  138  						love.mouse.setCursor(sizenwse)\n  139  					end\n  140: 				elseif loveframes.util.BoundingBox(hoverobject.x + hoverobject.width - 5, mx, hoverobject.y + hoverobject.height - 5, my, 5, 1, 5, 1) then\n  141  					local sizenwse = love.mouse.getSystemCursor(\"sizenwse\")\n  142  					if curcursor ~= sizenwse then\n  143  						love.mouse.setCursor(sizenwse)\n  144  					end\n  145: 				elseif loveframes.util.BoundingBox(hoverobject.x + hoverobject.width - 5, mx, hoverobject.y, my, 5, 1, 5, 1) then\n  146  					local sizenesw = love.mouse.getSystemCursor(\"sizenesw\")\n  147  					if curcursor ~= sizenesw then\n  148  						love.mouse.setCursor(sizenesw)\n  149  					end\n  150: 				elseif loveframes.util.BoundingBox(hoverobject.x, mx, hoverobject.y + hoverobject.height - 5, my, 5, 1, 5, 1) then\n  151  					local sizenesw = love.mouse.getSystemCursor(\"sizenesw\")\n  152  					if curcursor ~= sizenesw then\n  153  						love.mouse.setCursor(sizenesw)\n  154  					end\n  155: 				elseif loveframes.util.BoundingBox(hoverobject.x + 5, mx, hoverobject.y, my, hoverobject.width - 10, 1, 2, 1) then\n  156  					local sizens = love.mouse.getSystemCursor(\"sizens\")\n  157  					if curcursor ~= sizens then\n  158  						love.mouse.setCursor(sizens)\n  159  					end\n  160: 				elseif loveframes.util.BoundingBox(hoverobject.x + 5, mx, hoverobject.y + hoverobject.height - 2, my, hoverobject.width - 10, 1, 2, 1) then\n  161  					local sizens = love.mouse.getSystemCursor(\"sizens\")\n  162  					if curcursor ~= sizens then\n  163  						love.mouse.setCursor(sizens)\n  164  					end\n  165: 				elseif loveframes.util.BoundingBox(hoverobject.x, mx, hoverobject.y + 5, my, 2, 1, hoverobject.height - 10, 1) then\n  166  					local sizewe = love.mouse.getSystemCursor(\"sizewe\")\n  167  					if curcursor ~= sizewe then\n  168  						love.mouse.setCursor(sizewe)\n  169  					end\n  170: 				elseif loveframes.util.BoundingBox(hoverobject.x + hoverobject.width - 2, mx, hoverobject.y + 5, my, 2, 1, hoverobject.height - 10, 1) then\n  171  					local sizewe = love.mouse.getSystemCursor(\"sizewe\")\n  172  					if curcursor ~= sizewe then\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\libraries\\debug.lua:\n   52  	love.graphics.rectangle(\"line\", topcol.x - 1, topcol.y - 1, topcol.width + 2, topcol.height + 2)\n   53  	\n   54: 	-- draw main debug box\n   55  	love.graphics.setFont(font)\n   56  	love.graphics.setColor(0, 0, 0, 200)\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\libraries\\util.lua:\n   31  \n   32  --[[---------------------------------------------------------\n   33: 	- func: BoundingBox(x1, x2, y1, y2, w1, w2, h1, h2)\n   34: 	- desc: checks for a collision between two boxes\n   35  	- note: I take no credit for this function\n   36  --]]---------------------------------------------------------\n   37: function loveframes.util.BoundingBox(x1, x2, y1, y2, w1, w2, h1, h2)\n   38  \n   39  	if x1 > x2 + w2 - 1 or y1 > y2 + h2 - 1 or x2 > x1 + w1 - 1 or y2 > y1 + h1 - 1 then\n   ..\n   65  		local objectwidth = object.width\n   66  		local objectheight = object.height\n   67: 		local col = loveframes.util.BoundingBox(x, objectx, y, objecty, 1, objectwidth, 1, objectheight)\n   68  		local collide = object.collide\n   69  		if col and collide then\n   ..\n   74  				local cwidth = clickbounds.width\n   75  				local cheight = clickbounds.height\n   76: 				local clickcol = loveframes.util.BoundingBox(x, cx, y, cy, 1, cwidth, 1, cheight)\n   77  				if clickcol then\n   78  					table.insert(t, object)\n   ..\n  321  function loveframes.util.RectangleCollisionCheck(rect1, rect2)\n  322  \n  323: 	return loveframes.util.BoundingBox(rect1.x, rect2.x, rect1.y, rect2.y, rect1.width, rect2.width, rect1.height, rect2.height)\n  324  	\n  325  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\base.lua:\n  676  --[[---------------------------------------------------------\n  677  	- func: SetClickBounds(x, y, width, height)\n  678: 	- desc: sets a boundary box for the object's collision\n  679  			detection\n  680  --]]---------------------------------------------------------\n  ...\n  704  --[[---------------------------------------------------------\n  705  	- func: GetClickBounds()\n  706: 	- desc: gets the boundary box for the object's collision\n  707  			detection\n  708  --]]---------------------------------------------------------\n  ...\n  752  	\n  753  	if bounds then\n  754: 		local col = loveframes.util.BoundingBox(x, bounds.x, y, bounds.y, 1, bounds.width, 1, bounds.height)\n  755  		return col\n  756  	else\n  ...\n  793  	local height = self.height\n  794  	local mx, my = love.mouse.getPosition()\n  795: 	local selfcol = loveframes.util.BoundingBox(mx, x, my, y, 1, width, 1, height)\n  796  	local collisioncount = loveframes.collisioncount\n  797  	local curstate = loveframes.state\n  ...\n  812  				local cwidth = clickbounds.width\n  813  				local cheight = clickbounds.height\n  814: 				local clickcol = loveframes.util.BoundingBox(mx, cx, my, cy, 1, cwidth, 1, cheight)\n  815  				if clickcol then\n  816  					table.insert(loveframes.collisions, self)\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\checkbox.lua:\n    4  --]]------------------------------------------------\n    5  \n    6: -- checkbox object\n    7: local newobject = loveframes.NewObject(\"checkbox\", \"loveframes_object_checkbox\", true)\n    8  \n    9  --[[---------------------------------------------------------\n   ..\n   13  function newobject:initialize()\n   14  \n   15: 	self.type = \"checkbox\"\n   16  	self.width = 0\n   17  	self.height = 0\n   18: 	self.boxwidth = 20\n   19: 	self.boxheight = 20\n   20  	self.font = loveframes.basicfont\n   21  	self.checked = false\n   ..\n   55  	local hover = self.hover\n   56  	local internals = self.internals\n   57: 	local boxwidth = self.boxwidth\n   58: 	local boxheight = self.boxheight\n   59  	local parent = self.parent\n   60  	local base = loveframes.base\n   ..\n   80  	\n   81  	if internals[1] then\n   82: 		self.width = boxwidth + 5 + internals[1].width\n   83: 		if internals[1].height == boxheight then\n   84: 			self.height = boxheight\n   85  		else\n   86: 			if internals[1].height > boxheight then\n   87  				self.height = internals[1].height\n   88  			else\n   89: 				self.height = boxheight\n   90  			end\n   91  		end\n   92  	else\n   93: 		self.width = boxwidth\n   94: 		self.height = boxheight\n   95  	end\n   96  	\n   ..\n  129  	local selfskin = self.skin\n  130  	local skin = skins[selfskin] or skins[skinindex]\n  131: 	local drawfunc = skin.DrawCheckBox or skins[defaultskin].DrawCheckBox\n  132  	local draw = self.Draw\n  133  	local internals = self.internals\n  ...\n  225  function newobject:SetText(text)\n  226  \n  227: 	local boxwidth = self.boxwidth\n  228: 	local boxheight = self.boxheight\n  229  	\n  230  	if text ~= \"\" then\n  ...\n  237  		local directives = skin.directives\n  238  		if directives then\n  239: 			local default_color = directives.checkbox_text_default_color\n  240: 			local default_shadowcolor = directives.checkbox_text_default_shadowcolor\n  241: 			local default_font = directives.checkbox_text_default_font\n  242  			if default_color then\n  243  				textobject.defaultcolor = default_color\n  ...\n  257  		textobject:SetText(text)\n  258  		textobject.Update = function(object, dt)\n  259: 			if object.height > boxheight then\n  260: 				object:SetPos(boxwidth + 5, 0)\n  261  			else\n  262: 				object:SetPos(boxwidth + 5, boxheight/2 - object.height/2)\n  263  			end\n  264  		end\n  265  		table.insert(self.internals, textobject)\n  266  	else\n  267: 		self.width = boxwidth\n  268: 		self.height = boxheight\n  269  		self.internals = {}\n  270  	end\n  ...\n  298  \n  299  	if r1 then\n  300: 		self.boxwidth = self.parent.width * width\n  301  	else\n  302: 		self.boxwidth = width\n  303  	end\n  304  	\n  305  	if r2 then\n  306: 		self.boxheight = self.parent.height * height\n  307  	else\n  308: 		self.boxheight = height\n  309  	end\n  310  	\n  ...\n  320  \n  321  	if relative then\n  322: 		self.boxwidth = self.parent.width * width\n  323  	else\n  324: 		self.boxwidth = width\n  325  	end\n  326  	\n  ...\n  336  \n  337  	if relative then\n  338: 		self.boxheight = self.parent.height * height\n  339  	else\n  340: 		self.boxheight = height\n  341  	end\n  342  	\n  ...\n  403  \n  404  --[[---------------------------------------------------------\n  405: 	- func: newobject:GetBoxHeight()\n  406: 	- desc: gets the object's box size\n  407  --]]---------------------------------------------------------\n  408: function newobject:GetBoxSize()\n  409  \n  410: 	return self.boxwidth, self.boxheight\n  411  	\n  412  end\n  413  \n  414  --[[---------------------------------------------------------\n  415: 	- func: newobject:GetBoxWidth()\n  416: 	- desc: gets the object's box width\n  417  --]]---------------------------------------------------------\n  418: function newobject:GetBoxWidth()\n  419  \n  420: 	return self.boxwidth\n  421  	\n  422  end\n  423  \n  424  --[[---------------------------------------------------------\n  425: 	- func: newobject:GetBoxHeight()\n  426: 	- desc: gets the object's box height\n  427  --]]---------------------------------------------------------\n  428: function newobject:GetBoxHeight()\n  429  \n  430: 	return self.boxheight\n  431  	\n  432  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\collapsiblecategory.lua:\n  150  	\n  151  	if hover then\n  152: 		local col = loveframes.util.BoundingBox(self.x, x, self.y, y, self.width, 1, self.closedheight, 1)\n  153  		if button == \"l\" and col then\n  154  			local baseparent = self:GetBaseParent()\n  ...\n  191  	local enabled = self.enabled\n  192  	local open = self.open\n  193: 	local col = loveframes.util.BoundingBox(self.x, x, self.y, y, self.width, 1, self.closedheight, 1)\n  194  	local children = self.children\n  195  	local curobject = children[1]\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\frame.lua:\n  490  			local topcol\n  491  			if self.canresize then\n  492: 				topcol = loveframes.util.BoundingBox(x, self.x + 2, y, self.y + 2, 1, self.width - 4, 1, 21)\n  493  			else\n  494: 				topcol = loveframes.util.BoundingBox(x, self.x, y, self.y, 1, self.width, 1, 25)\n  495  			end\n  496  			if topcol then\n  ...\n  506  		end\n  507  		if not self.resizing and self.canresize then\n  508: 			if loveframes.util.BoundingBox(self.x, x, self.y, y, 5, 1, 5, 1) then\n  509  				self.resizing = true\n  510  				self.dragging = false\n  ...\n  521  					self.resizeymod = y - self.y\n  522  				end\n  523: 			elseif loveframes.util.BoundingBox(self.x + self.width - 5, x, self.y + self.height - 5, y, 5, 1, 5, 1) then\n  524  				self.resizing = true\n  525  				self.resize_mode = \"bottom_right\"\n  ...\n  535  					self.resizeymod = (self.y + self.height) - y\n  536  				end\n  537: 			elseif loveframes.util.BoundingBox(self.x + self.width - 5, x, self.y, y, 5, 1, 5, 1) then\n  538  				self.resizing = true\n  539  				self.dragging = false\n  ...\n  550  					self.resizeymod = y - self.y\n  551  				end\n  552: 			elseif loveframes.util.BoundingBox(self.x, x, self.y + self.height - 5, y, 5, 1, 5, 1) then\n  553  				self.resizing = true\n  554  				self.dragging = false\n  ...\n  565  					self.resizeymod = (self.y + self.height) - y\n  566  				end\n  567: 			elseif loveframes.util.BoundingBox(self.x + 5, x, self.y, y, self.width - 10, 1, 2, 1) then\n  568  				self.resizing = true\n  569  				self.dragging = false\n  ...\n  577  					self.resizeymod = y - self.y\n  578  				end\n  579: 			elseif loveframes.util.BoundingBox(self.x + 5, x, self.y + self.height - 2, y, self.width - 10, 1, 2, 1) then\n  580  				self.resizing = true\n  581  				self.dragging = false\n  ...\n  589  					self.resizeymod = (self.y + self.height) - y \n  590  				end\n  591: 			elseif loveframes.util.BoundingBox(self.x, x, self.y + 5, y, 2, 1, self.height - 10, 1) then\n  592  				self.resizing = true\n  593  				self.dragging = false\n  ...\n  601  					self.resizexmod = x - self.x\n  602  				end\n  603: 			elseif loveframes.util.BoundingBox(self.x + self.width - 2, x, self.y + 5, y, 2, 1, self.height - 10, 1) then\n  604  				self.resizing = true\n  605  				self.dragging = false\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\list.lua:\n  155  		\n  156  	for k, v in ipairs(children) do\n  157: 		local col = loveframes.util.BoundingBox(x, v.x, y, v.y, width, v.width, height, v.height)\n  158  		if col then\n  159  			v:draw()\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\numberbox.lua:\n    4  --]]------------------------------------------------\n    5  \n    6: -- numberbox object\n    7: local newobject = loveframes.NewObject(\"numberbox\", \"loveframes_object_numberbox\", true)\n    8  \n    9  --[[---------------------------------------------------------\n   ..\n   13  function newobject:initialize()\n   14  	\n   15: 	self.type = \"numberbox\"\n   16  	self.width = 80\n   17  	self.height = 20\n   ..\n  208  	local selfskin = self.skin\n  209  	local skin = skins[selfskin] or skins[skinindex]\n  210: 	local drawfunc = skin.DrawNumberBox or skins[defaultskin].DrawNumberBox\n  211  	local draw = self.Draw\n  212  	local drawcount = loveframes.drawcount\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\radiobutton.lua:\n   16  	self.width = 0\n   17  	self.height = 0\n   18: 	self.boxwidth = 20\n   19: 	self.boxheight = 20\n   20  	self.font = loveframes.basicfont\n   21  	self.checked = false\n   ..\n   56  	local hover = self.hover\n   57  	local internals = self.internals\n   58: 	local boxwidth = self.boxwidth\n   59: 	local boxheight = self.boxheight\n   60  	local parent = self.parent\n   61  	local base = loveframes.base\n   ..\n   81  	\n   82  	if internals[1] then\n   83: 		self.width = boxwidth + 5 + internals[1].width\n   84: 		if internals[1].height == boxheight then\n   85: 			self.height = boxheight\n   86  		else\n   87: 			if internals[1].height > boxheight then\n   88  				self.height = internals[1].height\n   89  			else\n   90: 				self.height = boxheight\n   91  			end\n   92  		end\n   93  	else\n   94: 		self.width = boxwidth\n   95: 		self.height = boxheight\n   96  	end\n   97  	\n   ..\n  211  function newobject:SetText(text)\n  212  \n  213: 	local boxwidth = self.boxwidth\n  214: 	local boxheight = self.boxheight\n  215  	\n  216  	if text ~= \"\" then\n  ...\n  243  		textobject:SetText(text)\n  244  		textobject.Update = function(object, dt)\n  245: 			if object.height > boxheight then\n  246: 				object:SetPos(boxwidth + 5, 0)\n  247  			else\n  248: 				object:SetPos(boxwidth + 5, boxheight/2 - object.height/2)\n  249  			end\n  250  		end\n  251  		table.insert(self.internals, textobject)\n  252  	else\n  253: 		self.width = boxwidth\n  254: 		self.height = boxheight\n  255  		self.internals = {}\n  256  	end\n  ...\n  284  \n  285  	if r1 then\n  286: 		self.boxwidth = self.parent.width * width\n  287  	else\n  288: 		self.boxwidth = width\n  289  	end\n  290  	\n  291  	if r2 then\n  292: 		self.boxheight = self.parent.height * height\n  293  	else\n  294: 		self.boxheight = height\n  295  	end\n  296  	\n  ...\n  306  \n  307  	if relative then\n  308: 		self.boxwidth = self.parent.width * width\n  309  	else\n  310: 		self.boxwidth = width\n  311  	end\n  312  	\n  ...\n  322  \n  323  	if relative then\n  324: 		self.boxheight = self.parent.height * height\n  325  	else\n  326: 		self.boxheight = height\n  327  	end\n  328  	\n  ...\n  416  \n  417  --[[---------------------------------------------------------\n  418: 	- func: newobject:GetBoxHeight()\n  419: 	- desc: gets the object's box size\n  420  --]]---------------------------------------------------------\n  421: function newobject:GetBoxSize()\n  422  \n  423: 	return self.boxwidth, self.boxheight\n  424  	\n  425  end\n  426  \n  427  --[[---------------------------------------------------------\n  428: 	- func: newobject:GetBoxWidth()\n  429: 	- desc: gets the object's box width\n  430  --]]---------------------------------------------------------\n  431: function newobject:GetBoxWidth()\n  432  \n  433: 	return self.boxwidth\n  434  	\n  435  end\n  436  \n  437  --[[---------------------------------------------------------\n  438: 	- func: newobject:GetBoxHeight()\n  439: 	- desc: gets the object's box height\n  440  --]]---------------------------------------------------------\n  441: function newobject:GetBoxHeight()\n  442  \n  443: 	return self.boxheight\n  444  	\n  445  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\tabs.lua:\n  164  	\n  165  	for k, v in ipairs(internals) do\n  166: 		local col = loveframes.util.BoundingBox(x + self.buttonareax, v.x, self.y, v.y, self.buttonareawidth, v.width, tabheight, v.height)\n  167  		if col or v.type == \"scrollbutton\" then\n  168  			v:draw()\n  ...\n  217  	if button == \"wu\" then\n  218  		local buttonheight = self:GetHeightOfButtons()\n  219: 		local col = loveframes.util.BoundingBox(self.x, x, self.y, y, self.width, 1, buttonheight, 1)\n  220  		local visible = internals[numinternals - 1]:GetVisible()\n  221  		if col and visible then\n  ...\n  236  	if button == \"wd\" then\n  237  		local buttonheight = self:GetHeightOfButtons()\n  238: 		local col = loveframes.util.BoundingBox(self.x, x, self.y, y, self.width, 1, buttonheight, 1)\n  239  		local visible = internals[numinternals]:GetVisible()\n  240  		if col and visible then\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\text.lua:\n  109  				local twidth = font:getWidth(text)\n  110  				local theight = font:getHeight()\n  111: 				local col = loveframes.util.BoundingBox(x + linkx, mx, y + linky, my, twidth, 1, theight, 1)\n  112  				v.hover = false\n  113  				if col then\n  ...\n  210  					local twidth = font:getWidth(text)\n  211  					local theight = font:getHeight()\n  212: 					local col = loveframes.util.BoundingBox(objx + linkx, x, objy + linky, y, twidth, 1, theight, 1)\n  213  					if col then\n  214  						local onclicklink = self.OnClickLink\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\textinput.lua:\n 1002  		local selfcol\n 1003  		if vbar and not hbar then\n 1004: 			selfcol = loveframes.util.BoundingBox(selfx, x, selfy, y, selfwidth - 16, 1, self.height, 1)\n 1005  		elseif hbar and not vbar then\n 1006: 			selfcol = loveframes.util.BoundingBox(selfx, x, selfy, y, selfwidth, 1, self.height - 16, 1)\n 1007  		elseif not vbar and not hbar then\n 1008: 			selfcol = loveframes.util.BoundingBox(selfx, x, selfy, y, selfwidth, 1, self.height, 1)\n 1009  		elseif vbar and hbar then\n 1010: 			selfcol = loveframes.util.BoundingBox(selfx, x, selfy, y, selfwidth - 16, 1, self.height - 16, 1)\n 1011  		end\n 1012  		if selfcol then\n ....\n 1014  			local textoffsety = self.textoffsety\n 1015  			for i=1, numlines do\n 1016: 				local linecol = loveframes.util.BoundingBox(selfx, x, (selfy - offsety) + textoffsety + (theight * i) - theight, y, self.width, 1, theight, 1)\n 1017  				if linecol then\n 1018  					liney = (selfy - offsety) + textoffsety + (theight * i) - theight\n ....\n 1034  				local tx = self.textx + xpos\n 1035  				local ty = self.texty\n 1036: 				local col = loveframes.util.BoundingBox(tx, x, liney, y, width, 1, height, 1)\n 1037  				\n 1038  				xpos = xpos + width\n ....\n 1071  			local tx = self.textx + xpos\n 1072  			local ty = self.texty\n 1073: 			local col = loveframes.util.BoundingBox(tx, x, ty, y, width, 1, height, 1)\n 1074  			xpos = xpos + width\n 1075  			if col then\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\internal\\columnlist\\columnlistarea.lua:\n   74  	\n   75  	for k, v in ipairs(children) do\n   76: 		local col = loveframes.util.BoundingBox(self.x, v.x, self.y, v.y, self.width, v.width, self.height, v.height)\n   77  		if col then\n   78  			v:update(dt)\n   ..\n  130  	\n  131  	for k, v in ipairs(children) do\n  132: 		local col = loveframes.util.BoundingBox(self.x, v.x, self.y, v.y, self.width, v.width, self.height, v.height)\n  133  		if col then\n  134  			v:draw()\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\objects\\internal\\multichoice\\multichoicelist.lua:\n   75  	local height = love.graphics.getHeight()\n   76  	local x, y = love.mouse.getPosition()\n   77: 	local selfcol = loveframes.util.BoundingBox(x, self.x, y, self.y, 1, self.width, 1, self.height)\n   78  	local parent = self.parent\n   79  	local base = loveframes.base\n   ..\n  173  		\n  174  	for k, v in ipairs(children) do\n  175: 		local col = loveframes.util.BoundingBox(self.x, v.x, self.y, v.y, self.width, v.width, self.height, v.height)\n  176  		if col then\n  177  			v:draw()\n  ...\n  206  	end\n  207  	\n  208: 	local selfcol = loveframes.util.BoundingBox(x, self.x, y, self.y, 1, self.width, 1, self.height)\n  209  	local toplist = self:IsTopList()\n  210  	local internals = self.internals\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\skins\\Blue\\skin.lua:\n   99  skin.controls.slider_bar_outline_color              = {220, 220, 220, 255}\n  100  \n  101: -- checkbox\n  102: skin.controls.checkbox_body_color                   = {255, 255, 255, 255}\n  103: skin.controls.checkbox_check_color                  = {128, 204, 255, 255}\n  104: skin.controls.checkbox_text_font                    = smallfont\n  105  \n  106  -- radiobutton\n  ...\n 1289  \n 1290  --[[---------------------------------------------------------\n 1291: 	- func: skin.DrawCheckBox(object)\n 1292: 	- desc: draws the check box object\n 1293  --]]---------------------------------------------------------\n 1294: function skin.DrawCheckBox(object)\n 1295  	\n 1296  	local skin = object:GetSkin()\n 1297  	local x = object:GetX()\n 1298  	local y = object:GetY()\n 1299: 	local width = object:GetBoxWidth()\n 1300: 	local height = object:GetBoxHeight()\n 1301  	local checked = object:GetChecked()\n 1302  	local hover = object:GetHover()\n 1303: 	local bodycolor = skin.controls.checkbox_body_color\n 1304: 	local checkcolor = skin.controls.checkbox_check_color\n 1305  	\n 1306  	love.graphics.setColor(bodycolor)\n ....\n 1323  \n 1324  --[[---------------------------------------------------------\n 1325: 	- func: skin.DrawCheckBox(object)\n 1326  	- desc: draws the radio button object\n 1327  --]]---------------------------------------------------------\n ....\n 1331  	local x = object:GetX()\n 1332  	local y = object:GetY()\n 1333: 	local width = object:GetBoxWidth()\n 1334: 	local height = object:GetBoxHeight()\n 1335  	local checked = object:GetChecked()\n 1336  	local hover = object:GetHover()\n ....\n 1659  \n 1660  --[[---------------------------------------------------------\n 1661: 	- func: skin.DrawNumberBox(object)\n 1662: 	- desc: draws the numberbox object\n 1663  --]]---------------------------------------------------------\n 1664: function skin.DrawNumberBox(object)\n 1665  \n 1666  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\libs\\LoveFrames\\skins\\Orange\\skin.lua:\n   22  skin.controls.slider_bar_outline_color              = {220, 220, 220, 255}\n   23  \n   24: -- checkbox\n   25: skin.controls.checkbox_check_color                  = {255, 153, 0, 255}\n   26  \n   27  -- radiobutton\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\BaseUnit.lua:\n    5  BaseUnit = class('BaseUnit', MoveableEntity)\n    6  \n    7: function BaseUnit:initialize(x, y, box)\n    8  	MoveableEntity.initialize(\n    9  		self,\n   10  		x,\n   11  		y,\n   12: 		box\n   13  	)\n   14  	self.commandQueue = Queue.new()\n   ..\n   60  \n   61  function BaseUnit:tryToSelect(x, y)\n   62: 	return self.boundingBox:pointWithinSquare(x, y)\n   63  end\n   64  \n   65  function BaseUnit:tryToDragSelect(rect)\n   66: 	return self.boundingBox:objectWithinSquare(rect)\n   67  end\n   68  \n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\Light.lua:\n    8  		x, \n    9  		y, \n   10: 		BoundingBox:new(\n   11  			x - (bbSize / 2), \n   12  			y - (bbSize / 2),\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\MoveableEntity.lua:\n    5  MoveableEntity = class('MoveableEntity', Entity)\n    6  \n    7: function MoveableEntity:initialize(x, y, box)\n    8: 	Entity.initialize(self, x, y, box)\n    9  	self.targetVelocity = vector(0, 0) -- target velocity with x and y components\n   10  \n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\square.lua:\n    3  local class = require 'src.libs.middleclass'\n    4  require 'src.utils.geometry'\n    5: require 'src.utils.BoundingBox'\n    6  require 'src.units.BaseUnit'\n    7  require 'src.units.Light'\n    .\n   13  		x, \n   14  		y, \n   15: 		BoundingBox:new(\n   16  			x - (width / 2), \n   17  			y - (height / 2),\n   ..\n   41  	if not self.colorTable.a then self.colorTable.a = 255 end\n   42  	love.graphics.setColor(self.colorTable.r, self.colorTable.g, self.colorTable.b, self.colorTable.a)\n   43: 	love.graphics.rectangle(self.mode, self.boundingBox.x1, self.boundingBox.y1, self.boundingBox.width, self.boundingBox.height)\n   44  end\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\utils\\BoundingBox.lua:\n    1  local class = require 'src.libs.middleclass'\n    2  \n    3: BoundingBox = class('BoundingBox')\n    4  \n    5: function BoundingBox:initialize(x1, y1, x2, y2)\n    6  	self.x1 = x1\n    7  	self.y1 = y1\n    .\n   13  end\n   14  \n   15: function BoundingBox:pointWithinSquare(pointX, pointY)\n   16  	if pointX > self.x1 and pointX < self.x2 then\n   17  		if pointY > self.y1 and pointY < self.y2 then\n   ..\n   22  end\n   23  \n   24: function BoundingBox:vertices()\n   25  	return self.x1, self.y1, self.x2, self.y1, self.x2, self.y2, self.x1, self.y2\n   26  end\n   27  \n   28: function BoundingBox:objectWithinSquare(rect)\n   29  	if rect:pointWithinSquare(self.x1, self.y1) then\n   30  		return true\n\n250 matches across 28 files\n\n\nSearching 85 files for \"tryToDragSelect\"\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\Game.lua:\n  115  	for id, gameObj in pairs(Entities.GameObjects) do\n  116  \n  117: 		if gameObj.tryToDragSelect ~= nil then\n  118: 			if gameObj:tryToDragSelect(selectionBox) then\n  119  				if not love.keyboard.isDown( \"lshift\" ) and initialDeselect then\n  120  					Game:deselectObjects()\n\nC:\\Users\\NathanK\\Documents\\GitHub\\Love2DExperiment\\src\\units\\BaseUnit.lua:\n   63  end\n   64  \n   65: function BaseUnit:tryToDragSelect(rect)\n   66  	return self.boundingBox:objectWithinSquare(rect)\n   67  end\n\n3 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 32318,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "love",
		"selected_items":
		[
			[
				"love",
				"Build With: LuaLove - Love2D"
			],
			[
				"Love",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"box",
				"Bookmarks: Select Next"
			],
			[
				"loev",
				"Build With: Love"
			],
			[
				"lover",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"synalua",
				"Set Syntax: Lua"
			],
			[
				"synjson",
				"Set Syntax: JSON"
			],
			[
				"instap",
				"Package Control: Install Package"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"synj",
				"Set Syntax: JSON"
			],
			[
				"love2",
				"Build With: LuaLove - Love2D"
			],
			[
				"Llvoe",
				"Set Syntax: Lua (Love)"
			],
			[
				"find",
				"Find: In Project"
			],
			[
				"findp",
				"Find: In Project"
			],
			[
				"new",
				"Tasks: New"
			],
			[
				"lvo",
				"Build: Love2D"
			],
			[
				"LOVE",
				"Build: Love2D"
			],
			[
				"lov",
				"Build: Love2D"
			],
			[
				"llove",
				"Set Syntax: Lua (Love)"
			],
			[
				"findi",
				"Find: In Project"
			],
			[
				"ove",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"synlual",
				"Set Syntax: Lua (Love)"
			],
			[
				"synlua",
				"Set Syntax: Lua"
			],
			[
				"lo",
				"Build: Love2D"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"findpr",
				"Find: In Project"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal pac",
				"Package Control: Install Package"
			],
			[
				"ind",
				"Indentation: Convert to Tabs"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"lovr",
				"Snippet: self.var = var or default"
			],
			[
				"loe",
				"Build: Love2D"
			],
			[
				"LOV",
				"Build: Love2D"
			],
			[
				"locw",
				"Convert Case: Lower Case"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"instpac",
				"Package Control: Install Package"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"syntxml",
				"Set Syntax: XML"
			],
			[
				"syntac",
				"Set Syntax: C"
			],
			[
				"instal p",
				"Package Control: Install Package"
			],
			[
				"instal lpac",
				"Package Control: Install Package"
			],
			[
				"sql",
				"Set Syntax: SQL"
			],
			[
				"Packinstal",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/commands",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/utils"
	],
	"file_history":
	[
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/units/Entity.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/world.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/Entities.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/utils/shader.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/units/square.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/utils/quadtree.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/units/Player.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/GameController.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/libs/LoveFrames/init.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/resource.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/src/commands/MoveCommand.lua",
		"/C/Users/NathanK/Documents/GitHub/Love2DExperiment/conf.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/utils/shader.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/libs/LoveFrames/objects/base.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/libs/LoveFrames/objects/menu.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/libs/LoveFrames/init.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/units/Light.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/units/BaseUnit.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/units/Entity.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/conf.lua",
		"/C/Users/Nathan/Documents/GitHub/Love2DExperiment/src/utils/camera.lua",
		"/C/Users/Nathan/Downloads/A03_0859_0344404_025-11Jun14.csv",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/Game.sublime-project",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/Game.lua",
		"/C/Users/Nathan/Downloads/A03_0859_0344404_025-27Jul14.csv",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/commands/MoveCommand.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/commands/StopCommand.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/queue.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/conf.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/shader.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/units/MoveableEntity.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/GameController.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/main.lua",
		"/C/Users/Nathan/Documents/Paint.NET User Files/Palettes/COLOR_WHEEL_BASE.pal",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/hud.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/units/Entity.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/Entities.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/units/Light.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/world.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/BoundingBox.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/selection.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/commands/Command.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/units/BaseUnit.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/units/square.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/libs/LoveFrames/objects/internal/sliderbutton.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/libs/LoveFrames/objects/internal/modalbackground.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/libs/LoveFrames/init.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/libs/LoveFrames/objects/form.lua",
		"/C/Users/Nathan/Documents/Paint.NET User Files/Palettes/test.txt",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/vector.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/geometry.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/input.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/Settings.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/quadtree.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/Gameobjects.lua",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/utils/camera.lua",
		"/C/Users/Nathan/Desktop/Nathan/Uni/ENCE361/StellarisWare/boards/ek-lm3s1968/ence361-p1-20/RMS_Project/menuHandler.c",
		"/C/Users/Nathan/Desktop/Nathan/Uni/ENCE361/StellarisWare/boards/ek-lm3s1968/ence361-p1-20/RMS_Project/RMS_project.c",
		"/C/Users/Nathan/Desktop/Nathan/Uni/ENCE361/StellarisWare/boards/ek-lm3s1968/ence361-p1-20/RMS_Project/RMS_project.h",
		"/C/Users/Nathan/Documents/LOVE/Love2DExperiment/src/resource.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/conf.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/utils/stack.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/init.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/units/BaseUnit.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/Game.sublime-project",
		"/C/Users/Nathan/Documents/LOVE/Game/Game.sublime-workspace",
		"/C/Users/Nathan/Documents/LOVE/Game/Game.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/main.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/utils/quadtree.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/quadtree.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/utils/camera.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/camera.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/command.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/src/utils/vector.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/vector.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/MoveCommand.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/hud.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/input.lua",
		"/C/Users/Nathan/Documents/LOVE/main.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/GameController.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/world.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/init.lua",
		"/C/Users/Nathan/Documents/LOVE/lighting/shadows.lua",
		"/C/Users/Nathan/Documents/LOVE/lighting/main.lua",
		"/C/Users/Nathan/AppData/Local/Temp/7zE767F.tmp/shadows.lua",
		"/C/Users/Nathan/AppData/Local/Temp/7zE10AB.tmp/main.lua",
		"/C/Users/Nathan/Desktop/index.html",
		"/C/Users/Nathan/Documents/LOVE/Game/middleclass.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/selection.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/resource.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/BoundingBox.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/StopCommand.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/BaseUnit.lua",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/Dark Reign 1.7/DARK/GRAPHICS/BARREN/BARREN.TIL",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/Dark Reign 1.7/DARK/GRAPHICS/BARREN/BARREN.PAL",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/Dark Reign 1.7/DARK/GRAPHICS/BARREN/PACKMAN.CFG",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/Dark Reign 1.7/DARK/GRAPHICS/BARREN/PackmnEx.cfg",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/Dark Reign 1.7/DARK/GRAPHICS/BARREN/spriteEx.ftg",
		"/C/Users/Nathan/Desktop/Nathan/Games/dkreign17/barren/sprites/go.bat",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/boundingbox.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/square.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/Gameobjects.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/queue.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/geometry.lua",
		"/C/Users/Nathan/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Nathan/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Nathan/Documents/LOVE/Game/camera.lua",
		"/C/Users/Nathan/Documents/LOVE/Game/utils/stack.lua",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/classes/TaskManagerController.cls",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/classes/TaskManagerController_old.cls",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/pages/TaskManager.page",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/staticresources/TaskManager_Script.resource",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/classes/Test_AEInsight.cls",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/trineo_ops_sandbox.sublime-project",
		"/C/Users/Nathan/Desktop/Nathan/Dev and Programming/codeigniter/blah.cls",
		"/C/Users/Nathan/Desktop/Nathan/Dev and Programming/codeigniter/application/models/media.php",
		"/C/Users/Nathan/Desktop/Nathan/Dev and Programming/codeigniter/index.php",
		"/C/Program Files (x86)/Steam/steamapps/sourcemods/zombies2013_src/src/creategameprojects.bat",
		"/C/Program Files/Sublime Text 3/comment.sublime-snippet.xml",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/triggers/sendStoryToPivotal.trigger",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/components/SitePoweredBy.component",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/staticresources/ProjectStats_Style.resource",
		"/C/Users/Nathan/Documents/mm_workspace/trineo_ops_sandbox/src/pages/Schedule.page",
		"/C/Program Files (x86)/Secret Maryo Chronicles/src/player/player.cpp",
		"/C/Program Files (x86)/Secret Maryo Chronicles/src/input/keyboard.cpp",
		"/C/Users/Nathan/Desktop/Nathan/Nathan Kramer/uni.todo",
		"/C/Users/Nathan/Documents/Software Projects/Games and Mods/Pixelmon/forge/mcp/src/minecraft/pixelmon/enums/EnumBiomes.java",
		"/C/Program Files (x86)/Secret Maryo Chronicles/src/audio/sound_manager.cpp"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"<open files>,<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GameObjects",
			"tryToDragSelect",
			"box",
			"overlap",
			"Square",
			"SQUARE",
			"player",
			"colour",
			"else",
			"\"y\": ",
			"\"x\":",
			"print",
			"dimensions",
			"initialize",
			"square",
			"currentDir",
			"square",
			"BaseUnit",
			"Square",
			"addSquare",
			"Samurai",
			"utils.middleclass",
			"0.3",
			"Entities.GameObjects[gameObj]",
			"for gameObj = 0, (Entities.size-1) do",
			"entity",
			"Entities",
			"World",
			"shadowCasters[b]",
			"gameObj",
			"GameObjects",
			"Entities",
			"GameObjects",
			"src.GameObjects",
			"self",
			"end",
			"light.get",
			"light.x",
			"BaseUnit",
			"mode",
			"Square",
			"lg",
			"addSquare",
			"targetVelocity",
			".x",
			"y.x",
			"setTargetVelocity",
			"checkForCameraScroll",
			"mPosY",
			"mPosX",
			"moveableEntity",
			"gameObj",
			"Entity",
			"gridIncrement",
			"tonumber",
			"BaseUnit",
			"love.timer.getTime()",
			"lastKeyboardInput",
			"center",
			"f",
			"light.y",
			"light.x",
			"1.0",
			"pixelCode",
			"pixelcode",
			"/",
			"vector",
			"height",
			"gridSquareHeight",
			"resources",
			"pixel.",
			"x",
			"self._bounds.x1",
			"value",
			"600",
			"500",
			"600",
			"utils/",
			"graphics",
			"local",
			"startingY",
			"startingX",
			"startingY",
			"startingX",
			"255",
			"MoveCommand",
			"love.graphics.getWidth()",
			"love.keyboard.isDown( ",
			"love.timer.getTime()",
			"lastCtrlGroupTime",
			"lastInput",
			"end",
			"words",
			"or",
			"love.mouse.",
			"Game.camera",
			" * dt",
			"Screen.width",
			"self",
			"selected",
			"Hud.selectionBox.square",
			"rect",
			"x",
			"addObject",
			"GameObjects",
			"__lastClickedPoint",
			" point.y",
			"point.x",
			"gameObjects",
			"self",
			"self.y",
			"self.x",
			"alskdpqowieurwadsdawdadwwadwawda",
			"Reset_Position()",
			"position",
			"\""
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"libs.middleclass",
			"normalize_inplace",
			")\n",
			"end"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1294,
						"regions":
						{
						},
						"selection":
						[
							[
								507,
								507
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 264.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/hud.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3752,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Gameobjects.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 599,
						"regions":
						{
						},
						"selection":
						[
							[
								242,
								242
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/levels/test.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_name": "",
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/units/Wall.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 734,
						"regions":
						{
						},
						"selection":
						[
							[
								163,
								163
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/utils/shader.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3819,
						"regions":
						{
						},
						"selection":
						[
							[
								2033,
								2033
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/libs/JSON.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34842,
						"regions":
						{
						},
						"selection":
						[
							[
								883,
								883
							]
						],
						"settings":
						{
							"auto_name": "-- -*- coding: utf-8 -*-",
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Entities.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4346,
						"regions":
						{
						},
						"selection":
						[
							[
								2108,
								2108
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 990.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/units/MoveableEntity.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2902,
						"regions":
						{
						},
						"selection":
						[
							[
								941,
								941
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/units/Light.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 920,
						"regions":
						{
						},
						"selection":
						[
							[
								677,
								680
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 462.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/units/Player.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1158,
						"regions":
						{
						},
						"selection":
						[
							[
								355,
								355
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/input.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1725,
						"regions":
						{
						},
						"selection":
						[
							[
								428,
								428
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Game.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4154,
						"regions":
						{
						},
						"selection":
						[
							[
								924,
								924
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/world.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1969,
						"regions":
						{
						},
						"selection":
						[
							[
								386,
								386
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32318,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										182,
										185
									],
									[
										306,
										309
									],
									[
										343,
										346
									],
									[
										362,
										365
									],
									[
										573,
										576
									],
									[
										879,
										882
									],
									[
										948,
										951
									],
									[
										977,
										980
									],
									[
										997,
										1000
									],
									[
										1029,
										1032
									],
									[
										1070,
										1073
									],
									[
										1186,
										1189
									],
									[
										1219,
										1222
									],
									[
										1283,
										1286
									],
									[
										1345,
										1348
									],
									[
										1380,
										1383
									],
									[
										1477,
										1480
									],
									[
										1513,
										1516
									],
									[
										1554,
										1557
									],
									[
										1604,
										1607
									],
									[
										1843,
										1846
									],
									[
										1864,
										1867
									],
									[
										1947,
										1950
									],
									[
										1971,
										1974
									],
									[
										2096,
										2099
									],
									[
										2172,
										2175
									],
									[
										2242,
										2245
									],
									[
										2281,
										2284
									],
									[
										2320,
										2323
									],
									[
										2362,
										2365
									],
									[
										2533,
										2536
									],
									[
										2820,
										2823
									],
									[
										3119,
										3122
									],
									[
										3252,
										3255
									],
									[
										3291,
										3294
									],
									[
										3498,
										3501
									],
									[
										3586,
										3589
									],
									[
										3592,
										3595
									],
									[
										3678,
										3681
									],
									[
										3767,
										3770
									],
									[
										3781,
										3784
									],
									[
										3817,
										3820
									],
									[
										3861,
										3864
									],
									[
										3905,
										3908
									],
									[
										3948,
										3951
									],
									[
										4056,
										4059
									],
									[
										4152,
										4155
									],
									[
										4375,
										4378
									],
									[
										4498,
										4501
									],
									[
										4798,
										4801
									],
									[
										4819,
										4822
									],
									[
										4840,
										4843
									],
									[
										4864,
										4867
									],
									[
										5081,
										5084
									],
									[
										5204,
										5207
									],
									[
										5402,
										5405
									],
									[
										5423,
										5426
									],
									[
										5444,
										5447
									],
									[
										5468,
										5471
									],
									[
										5729,
										5732
									],
									[
										6000,
										6003
									],
									[
										6320,
										6323
									],
									[
										6615,
										6618
									],
									[
										6911,
										6914
									],
									[
										7199,
										7202
									],
									[
										7512,
										7515
									],
									[
										7801,
										7804
									],
									[
										8248,
										8251
									],
									[
										8526,
										8529
									],
									[
										8613,
										8616
									],
									[
										8779,
										8782
									],
									[
										9053,
										9056
									],
									[
										9335,
										9338
									],
									[
										9563,
										9566
									],
									[
										9920,
										9923
									],
									[
										10182,
										10185
									],
									[
										10385,
										10388
									],
									[
										10620,
										10623
									],
									[
										10906,
										10909
									],
									[
										11208,
										11211
									],
									[
										11271,
										11274
									],
									[
										11301,
										11304
									],
									[
										11469,
										11472
									],
									[
										11534,
										11537
									],
									[
										11561,
										11564
									],
									[
										11740,
										11743
									],
									[
										11756,
										11759
									],
									[
										11779,
										11782
									],
									[
										11796,
										11799
									],
									[
										11944,
										11947
									],
									[
										12013,
										12016
									],
									[
										12052,
										12055
									],
									[
										12111,
										12114
									],
									[
										12211,
										12214
									],
									[
										12283,
										12286
									],
									[
										12315,
										12318
									],
									[
										12483,
										12486
									],
									[
										12518,
										12521
									],
									[
										12662,
										12665
									],
									[
										12678,
										12681
									],
									[
										12701,
										12704
									],
									[
										12718,
										12721
									],
									[
										12890,
										12893
									],
									[
										12967,
										12970
									],
									[
										13043,
										13046
									],
									[
										13267,
										13270
									],
									[
										13307,
										13310
									],
									[
										13364,
										13367
									],
									[
										13378,
										13381
									],
									[
										13521,
										13524
									],
									[
										13553,
										13556
									],
									[
										13651,
										13654
									],
									[
										13715,
										13718
									],
									[
										13786,
										13789
									],
									[
										13853,
										13856
									],
									[
										13946,
										13949
									],
									[
										14010,
										14013
									],
									[
										14101,
										14104
									],
									[
										14168,
										14171
									],
									[
										14320,
										14323
									],
									[
										14366,
										14369
									],
									[
										14473,
										14476
									],
									[
										14511,
										14514
									],
									[
										14526,
										14529
									],
									[
										14662,
										14665
									],
									[
										14707,
										14710
									],
									[
										14815,
										14818
									],
									[
										14854,
										14857
									],
									[
										14989,
										14992
									],
									[
										15035,
										15038
									],
									[
										15144,
										15147
									],
									[
										15184,
										15187
									],
									[
										15395,
										15398
									],
									[
										15665,
										15668
									],
									[
										15996,
										15999
									],
									[
										16115,
										16118
									],
									[
										16312,
										16315
									],
									[
										16523,
										16526
									],
									[
										16797,
										16800
									],
									[
										17025,
										17028
									],
									[
										17270,
										17273
									],
									[
										17499,
										17502
									],
									[
										17763,
										17766
									],
									[
										17993,
										17996
									],
									[
										18322,
										18325
									],
									[
										18595,
										18598
									],
									[
										18659,
										18662
									],
									[
										18690,
										18693
									],
									[
										18860,
										18863
									],
									[
										19052,
										19055
									],
									[
										19088,
										19091
									],
									[
										19327,
										19330
									],
									[
										19354,
										19357
									],
									[
										19533,
										19536
									],
									[
										19549,
										19552
									],
									[
										19572,
										19575
									],
									[
										19589,
										19592
									],
									[
										19737,
										19740
									],
									[
										19806,
										19809
									],
									[
										19845,
										19848
									],
									[
										19904,
										19907
									],
									[
										20004,
										20007
									],
									[
										20076,
										20079
									],
									[
										20108,
										20111
									],
									[
										20207,
										20210
									],
									[
										20223,
										20226
									],
									[
										20246,
										20249
									],
									[
										20263,
										20266
									],
									[
										20428,
										20431
									],
									[
										20468,
										20471
									],
									[
										20525,
										20528
									],
									[
										20539,
										20542
									],
									[
										20682,
										20685
									],
									[
										20714,
										20717
									],
									[
										20812,
										20815
									],
									[
										20876,
										20879
									],
									[
										20947,
										20950
									],
									[
										21014,
										21017
									],
									[
										21107,
										21110
									],
									[
										21171,
										21174
									],
									[
										21262,
										21265
									],
									[
										21329,
										21332
									],
									[
										21481,
										21484
									],
									[
										21527,
										21530
									],
									[
										21634,
										21637
									],
									[
										21672,
										21675
									],
									[
										21687,
										21690
									],
									[
										21823,
										21826
									],
									[
										21868,
										21871
									],
									[
										21976,
										21979
									],
									[
										22015,
										22018
									],
									[
										22150,
										22153
									],
									[
										22196,
										22199
									],
									[
										22305,
										22308
									],
									[
										22345,
										22348
									],
									[
										22560,
										22563
									],
									[
										22862,
										22865
									],
									[
										23157,
										23160
									],
									[
										23537,
										23540
									],
									[
										23790,
										23793
									],
									[
										24122,
										24125
									],
									[
										24264,
										24267
									],
									[
										24410,
										24413
									],
									[
										24543,
										24546
									],
									[
										24780,
										24783
									],
									[
										25114,
										25117
									],
									[
										25322,
										25325
									],
									[
										25627,
										25630
									],
									[
										25845,
										25848
									],
									[
										26224,
										26227
									],
									[
										26454,
										26457
									],
									[
										26643,
										26646
									],
									[
										26980,
										26983
									],
									[
										27010,
										27013
									],
									[
										27092,
										27095
									],
									[
										27174,
										27177
									],
									[
										27362,
										27365
									],
									[
										27406,
										27409
									],
									[
										27516,
										27519
									],
									[
										27671,
										27674
									],
									[
										27715,
										27718
									],
									[
										27856,
										27859
									],
									[
										27917,
										27920
									],
									[
										28097,
										28100
									],
									[
										28326,
										28329
									],
									[
										28370,
										28373
									],
									[
										28580,
										28583
									],
									[
										28624,
										28627
									],
									[
										28735,
										28738
									],
									[
										28966,
										28969
									],
									[
										28996,
										28999
									],
									[
										29258,
										29261
									],
									[
										29346,
										29349
									],
									[
										29485,
										29488
									],
									[
										29607,
										29610
									],
									[
										29771,
										29774
									],
									[
										30031,
										30034
									],
									[
										30074,
										30077
									],
									[
										30369,
										30372
									],
									[
										30492,
										30495
									],
									[
										30792,
										30795
									],
									[
										30813,
										30816
									],
									[
										30834,
										30837
									],
									[
										30858,
										30861
									],
									[
										31035,
										31038
									],
									[
										31056,
										31059
									],
									[
										31094,
										31097
									],
									[
										31216,
										31219
									],
									[
										31412,
										31415
									],
									[
										31556,
										31559
									],
									[
										31887,
										31902
									],
									[
										31936,
										31951
									],
									[
										32202,
										32217
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								32157,
								32157
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 19250.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/levels/test.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_name": "",
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 136.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Game.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"game",
				"src\\Game.lua"
			],
			[
				"entit",
				"src\\Entities.lua"
			],
			[
				"worl",
				"src\\world.lua"
			],
			[
				"tesjs",
				"src\\levels\\test.json"
			],
			[
				"world",
				"src\\world.lua"
			],
			[
				"test",
				"src\\levels\\test.json"
			],
			[
				"wolr",
				"src\\world.lua"
			],
			[
				"square",
				"src\\units\\square.lua"
			],
			[
				"love",
				"src\\libs\\LoveFrames\\init.lua"
			],
			[
				"hud",
				"src\\hud.lua"
			],
			[
				"gam",
				"src\\Gameobjects.lua"
			],
			[
				"gamecon",
				"src\\GameController.lua"
			],
			[
				"in",
				"src\\input.lua"
			],
			[
				"main",
				"main.lua"
			],
			[
				"shade",
				"src\\utils\\shader.lua"
			],
			[
				"vector",
				"src\\utils\\vector.lua"
			],
			[
				"entie",
				"src\\Entities.lua"
			],
			[
				"shad",
				"src\\utils\\shader.lua"
			],
			[
				"shar",
				"src\\utils\\shader.lua"
			],
			[
				"ga",
				"src\\Game.lua"
			],
			[
				"squa",
				"src\\units\\square.lua"
			],
			[
				"movc",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"",
				"src\\Gameobjects.lua"
			],
			[
				"mo",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"l",
				"src\\units\\Light.lua"
			],
			[
				"bound",
				"src\\utils\\BoundingBox.lua"
			],
			[
				"mai",
				"main.lua"
			],
			[
				"enti",
				"src\\units\\Entity.lua"
			],
			[
				"geo",
				"src\\utils\\geometry.lua"
			],
			[
				"w",
				"src\\world.lua"
			],
			[
				"sh",
				"src\\utils\\shader.lua"
			],
			[
				"move",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"mainl",
				"main.lua"
			],
			[
				"vect",
				"src\\utils\\vector.lua"
			],
			[
				"movecom",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"input",
				"src\\input.lua"
			],
			[
				"inp",
				"src\\input.lua"
			],
			[
				"conf",
				"conf.lua"
			],
			[
				"que",
				"src\\utils\\queue.lua"
			],
			[
				"baseu",
				"src\\units\\BaseUnit.lua"
			],
			[
				"movec",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"gameob",
				"src\\Gameobjects.lua"
			],
			[
				"con",
				"conf.lua"
			],
			[
				"reso",
				"src\\resource.lua"
			],
			[
				"camera",
				"src\\utils\\camera.lua"
			],
			[
				"baseunit",
				"src\\units\\BaseUnit.lua"
			],
			[
				"res",
				"src\\resource.lua"
			],
			[
				"hud.",
				"src\\hud.lua"
			],
			[
				"gamecontr",
				"src\\GameController.lua"
			],
			[
				"stopcom",
				"src\\commands\\StopCommand.lua"
			],
			[
				"command",
				"src\\commands\\Command.lua"
			],
			[
				"movem",
				"src\\commands\\MoveCommand.lua"
			],
			[
				"baseun",
				"src\\units\\BaseUnit.lua"
			],
			[
				"ini",
				"src\\init.lua"
			],
			[
				"bounding",
				"src\\utils\\BoundingBox.lua"
			],
			[
				"game.",
				"Game.sublime-project"
			],
			[
				"gameobj",
				"src\\Gameobjects.lua"
			],
			[
				"select",
				"src\\selection.lua"
			],
			[
				"gamecontro",
				"GameController.lua"
			],
			[
				"init",
				"init.lua"
			],
			[
				"sel",
				"selection.lua"
			],
			[
				"middle",
				"middleclass.lua"
			],
			[
				"conf.lua",
				"conf.lua"
			],
			[
				"sto",
				"StopCommand.lua"
			],
			[
				"mia",
				"main.lua"
			],
			[
				"ma",
				"main.lua"
			],
			[
				"hu",
				"hud.lua"
			],
			[
				"queue",
				"utils\\queue.lua"
			],
			[
				"cam",
				"utils\\camera.lua"
			],
			[
				"contr",
				"GameController.lua"
			],
			[
				"geom",
				"geometry.lua"
			],
			[
				"taskmcont",
				"src\\classes\\TaskManagerController.cls"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 127.0,
		"last_filter": "resolve",
		"selected_items":
		[
			[
				"resolve",
				"Game:resolveCollisions"
			],
			[
				"powit",
				"BoundingBox:pointWithinSquare"
			],
			[
				"pwith",
				"BoundingBox:pointWithinSquare"
			],
			[
				"getobp",
				"GameObjects:getObjectPosition"
			],
			[
				"center",
				"Game:centerOnSelected"
			],
			[
				"chefosel",
				"Game:checkForSelect"
			],
			[
				"cgse",
				"CGSelection:initialize"
			],
			[
				"chefoscce",
				"GameController:checkForScreenCenter"
			],
			[
				"ler",
				"lerp"
			],
			[
				"object",
				"GameObjects:addSquare"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 219.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
